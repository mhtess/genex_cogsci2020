var transform_beta_params = function(prms) {
  return {
    a: prms.g * prms.d,
    b: (1 - prms.g) * prms.d
  }
}

var sample_beta_params = function() {
  return {
    g: uniformDrift({
      a: 0,
      b: 1,
      width: 0.1
    }),
    d: exponential({a: 1})
    // d: uniformDrift({
    //   a: 0,
    //   b: 100,
    //   width: 10
    // })
  }
}

var sample_mixture_component = function() {
  uniformDrift({
    a: 0,
    b: 1,
    width: 0.1
  })
}

var sample_mixture = function(n_components) {
  if (n_components == 1) {
    // display(1)
    return [1]
  } else if (n_components == 2) {
    // display(2)
    var p = sample_mixture_component()
    return [p, 1 - p]
  } else {
    // display(3)
    return normalize(repeat(n_components, sample_mixture_component))
  }
}

var n_components = data.n_components[0], n_samples = data.n_samples[0]

var model = function() {
  var phi = sample_mixture(n_components);
  var componentParameters = repeat(n_components, sample_beta_params)
  var transformedComponentParams = map(transform_beta_params, componentParameters)
  return sum(map(function(d) {
    // log(phi * B1 + (1 - phi) * B2)
    var componentLogLikelihood = map2(function(w, params) {
      Math.log(w) + Beta(params).score(d.avoided_endval)
    }, phi, transformedComponentParams)
    var scr = util.logsumexp(componentLogLikelihood)
    scr == -Infinity ? displayObj(d) : null
    // display(scr)
    return scr
  }, data.responses))
}

util.logsumexp(repeat(n_samples, model))
