// webppl mixture_of_betas-om.wppl --require ~/tools/webppl-csv independent 2accidental 1
// webppl mixture_of_betas-om.wppl --require webppl-csv combined 2accidental 1

var args = process.argv
var index = last(args) // load index as last command line index

var n_components = 2
var ais_steps = 10000,
    ais_samples = 5

var modelVariant = args[args.length - 3]
var condition = args[args.length - 2]

// var dataFrame = function(rawCSV) {
//   return map(function(row) {
//     return _.fromPairs(_.zip(rawCSV[0], row))
//   }, rawCSV.slice(1))
// }

var levels = function(df, label) {
  return _.uniq(_.map(df, label));
}

var displayObj = function(obj){
  return display(JSON.stringify(obj))
}
// /Users/mht/projects/genex-cogsci2020/analysis/webppl/

var df = dataFrame(
  csv.read("data_sets/genex-cogsci_expt1-filtered-forModel.csv"),
  ["avoided_endval"]
)

var df_condition = _.filter(df, {condition})
var df_generic = _.filter(df, {condition: "generic"})

var data_set = _.map(
  modelVariant == "independent" ? df_condition : df_condition.concat(df_generic),
  "avoided_endval")

var transform_beta_params = function(prms) {
  return {
    a: prms.g * prms.d,
    b: (1 - prms.g) * prms.d
  }
}

var sample_beta_params = function() {
  return {
    g: uniformDrift({
      a: 0,
      b: 1,
      width: 0.1
    }),
    d: exponential({a: 1})
    // d: uniformDrift({
    //   a: 0,
    //   b: 100,
    //   width: 10
    // })
  }
}

var sample_mixture_component = function() {
  uniformDrift({
    a: 0,
    b: 1,
    width: 0.1
  })
}

var sample_mixture = function(n_components) {
  if (n_components == 1) {
    // display(1)
    return [1]
  } else if (n_components == 2) {
    // display(2)
    var p = sample_mixture_component()
    return [p, 1 - p]
  } else {
    // display(3)
    return normalize(repeat(n_components, sample_mixture_component))
  }
}

var model = function() {
  var phi = sample_mixture(n_components);
  var componentParameters = repeat(n_components, sample_beta_params)
  var transformedComponentParams = map(transform_beta_params, componentParameters)

  mapData({
    data: data_set
  }, function(d) {
    // log(phi * B1 + (1 - phi) * B2)
    var componentLogLikelihood = map2(function(w, params) {
      Math.log(w) + Beta(params).score(d)
    }, phi, transformedComponentParams)
    var scr = util.logsumexp(componentLogLikelihood)
    scr == -Infinity ? displayObj(d) : null
    // displayObj(d)
    // display(scr)
    factor(scr)
  })

}

var resultsOutFile = "results/llh_" +  modelVariant + "_" + condition +
  "_steps-" + ais_steps + "_samples-" + ais_samples + "_chain-" + index + ".csv"

var fileHandle = webpplCsv.openFile(resultsOutFile)

var header_to_write = ["modelVariant", "condition", "steps", "sample_num", "chain", "weight"].join(",")
csv.writeLine(header_to_write,fileHandle)

var weights = map(function(i) {
  console.log(i)
 var weight = AIS(model, {samples: 1, steps: ais_steps})
 var line_to_write = [modelVariant, condition, ais_steps, i, index, weight].join(",")

 csv.writeLine(line_to_write, fileHandle)
 return weight
}, _.range(ais_samples))

weights;

// data_set
